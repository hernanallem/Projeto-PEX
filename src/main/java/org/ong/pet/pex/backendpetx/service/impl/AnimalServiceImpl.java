package org.ong.pet.pex.backendpetx.service.impl;import jakarta.persistence.EntityNotFoundException;import org.ong.pet.pex.backendpetx.dto.request.AnimalGenericoRequisicao;import org.ong.pet.pex.backendpetx.dto.request.AnimalObituarioResquisicao;import org.ong.pet.pex.backendpetx.dto.response.AnimalGenericoResposta;import org.ong.pet.pex.backendpetx.dto.response.RespostaAnimalSemConjunto;import org.ong.pet.pex.backendpetx.entities.Animal;import org.ong.pet.pex.backendpetx.entities.AnimalConjunto;import org.ong.pet.pex.backendpetx.entities.Obito;import org.ong.pet.pex.backendpetx.entities.Ong;import org.ong.pet.pex.backendpetx.enums.PorteEnum;import org.ong.pet.pex.backendpetx.enums.StatusEnum;import org.ong.pet.pex.backendpetx.repositories.AnimalConjuntoRepository;import org.ong.pet.pex.backendpetx.repositories.AnimalRepository;import org.ong.pet.pex.backendpetx.repositories.ObitoRepository;import org.ong.pet.pex.backendpetx.repositories.OngRepository;import org.ong.pet.pex.backendpetx.repositories.TutorRepository;import org.ong.pet.pex.backendpetx.service.AnimalService;import org.ong.pet.pex.backendpetx.service.exceptions.PetXException;import org.ong.pet.pex.backendpetx.service.impl.serviceUtils.AnimalUtils;import org.ong.pet.pex.backendpetx.service.mappers.AnimalMapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.orm.jpa.JpaSystemException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import static org.ong.pet.pex.backendpetx.service.mappers.AnimalMapper.converterParaAnimalSemConjunto;import static org.ong.pet.pex.backendpetx.service.mappers.AnimalMapper.converterParaRespostaAnimalComConjuntoDTO;@Servicepublic class AnimalServiceImpl implements AnimalService {    private final AnimalRepository animalRepository;    private final OngRepository ongRepository;    private final AnimalConjuntoRepository animalConjuntoRepository;    private final TutorRepository tutorRepository;    private final ObitoRepository obitoRepository;    private static final Logger logger = LoggerFactory.getLogger(AnimalServiceImpl.class);    private final AnimalUtils animalUtils;    public AnimalServiceImpl(AnimalRepository animalRepository, OngRepository ongRepository, AnimalConjuntoRepository animalConjuntoRepository, TutorRepository tutorRepository, ObitoRepository obitoRepository, AnimalUtils animalUtils) {        this.animalRepository = animalRepository;        this.ongRepository = ongRepository;        this.animalConjuntoRepository = animalConjuntoRepository;        this.tutorRepository = tutorRepository;        this.obitoRepository = obitoRepository;        this.animalUtils = animalUtils;    }    @Transactional    public void adicionarAdocaoConjuntaEmAnimal(Map<String, String> chips) {        String idPrincipal = chips.remove("principal");        // pegando verificando e pegando a lista dos animais que foram passado o chipId        var lista = chips.values().stream()                .map(value -> animalRepository.findAnimalByChipId(value)                        .orElseThrow(() -> PetXException.animalNaoEncontrado(value)))                .collect(Collectors.toSet());        // verificando se os animais a serem vinculado no principal nao esta falecido        lista.forEach(this::verificarSeOAnimalNaoEstaFalecido);        // pegando o animal principal aonde sera adicionado os outros animais        var animalPrincipal = animalRepository.findAnimalByChipId(idPrincipal)                .orElseThrow(() -> PetXException.animalNaoEncontrado(idPrincipal));        verificarSeOAnimalNaoEstaFalecido(animalPrincipal);        lista.forEach(animal -> {            var animalConjunto = animalConjuntoRepository.findByAnimalRelacionamentoId(animal.getId());            if (animalConjunto.isPresent()) {                throw PetXException.animalJaCadastrado("Animal com CHIP: " + animal.getChipId() + " já pertence a um conjunto");            }            AnimalConjunto entidade = new AnimalConjunto();            entidade.setAnimalPrincipalId(animalPrincipal.getId());            entidade.setAnimalRelacionamentoId(animal.getId());            animalConjuntoRepository.save(entidade);        });    }    @Override    @Transactional(readOnly = true)    public List<RespostaAnimalSemConjunto> listaAnimaisCadastrados() {        List<Animal> lista = animalRepository.findAll();        return lista.stream()                .map(AnimalMapper::converterParaAnimalSemConjunto)                .collect(Collectors.toList());    }    @Override    @Transactional    public AnimalGenericoResposta atualizarAnimal(Long id, AnimalGenericoRequisicao animalSemConjuntoDTO) {        try {            Animal entidade = animalRepository.getReferenceById(id);            if (animalRepository.findAnimalByChipId(animalSemConjuntoDTO.getChipId()).isPresent() && !entidade.getChipId().equals(animalSemConjuntoDTO.getChipId())) {                throw new PetXException("Já existe um animal com o CHIP: " + animalSemConjuntoDTO.getChipId());            }            entidade.setChipId(animalSemConjuntoDTO.getChipId());            entidade.setNome(animalSemConjuntoDTO.getNome());            entidade.setRaca(animalSemConjuntoDTO.getRaca().toUpperCase());            entidade.setMaturidadeEnum(animalSemConjuntoDTO.getMaturidade());            entidade.setEspecieEnum(animalSemConjuntoDTO.getEspecie());            entidade.setPorteEnum(animalSemConjuntoDTO.getPorte());            entidade.setSexoEnum(animalSemConjuntoDTO.getSexo());            entidade.setOrigemEnum(animalSemConjuntoDTO.getOrigem());            entidade.setComportamentoEnum(animalSemConjuntoDTO.getComportamento());            entidade.setDoencas(animalSemConjuntoDTO.getDoencas());            entidade = animalRepository.save(entidade);            return converterParaRespostaAnimalComConjuntoDTO(entidade);        } catch (EntityNotFoundException e) {            throw PetXException.animalNaoEncontrado(id.toString());        } catch (DataIntegrityViolationException e) {            throw new PetXException("Erro ao salvar: dados conflitantes ou inválidos.");        } catch (JpaSystemException e) {            throw new PetXException("Erro de conexão com o banco de dados.");        } catch (RuntimeException e) {            throw new PetXException("Erro ao processar a solicitação: " + e.getMessage());        }    }    @Transactional    public void deletarPorId(Long id) {        try {            logger.info("Iniciando a exclusão do animal com id: {}", id);            var animal = animalRepository.findById(id)                    .orElseThrow(() -> PetXException.animalNaoEncontrado("Animal com id: " + id + " não encontrado"));            logger.info("Animal encontrado, iniciando processo de exclusão de relacionamentos");            logger.info("Removendo relacionamentos com tutores");            tutorRepository.removeAnimalFromTutor(animal);            logger.info("Removendo relacionamentos com doenças");            animal.setDoencas(new HashSet<>());            logger.info("Removendo relacionamento com ONG");            if (animal.getOng() != null) {                animal.getOng().getAnimais().remove(animal);                animal.setOng(null);            }            logger.info("Removendo relacionamentos de conjunto de animais");            animalConjuntoRepository.deleteAnimalConjuntoByAnimalConjuntoId(animal.getId());            logger.info("Limpando referências do animal");            animal.setTutores(new HashSet<>());            // o flush ele da um reload no banco de dados            animalRepository.flush();            logger.info("Excluindo o animal");            animalRepository.delete(animal);            animalRepository.flush();            logger.info("Animal excluído com sucesso");        } catch (Exception e) {            logger.error("Erro ao excluir animal: ", e);            throw PetXException.recursoNaoEncontrado("Erro ao tentar excluir o animal: ", id);        }    }    @Override    @Transactional    public AnimalGenericoResposta cadastrarAnimalSolo(AnimalGenericoRequisicao animalGenericoRequisicao) {        if (animalRepository.existsAnimalByChipId(animalGenericoRequisicao.getChipId()))            throw PetXException.jaExiste("Animal", "Chip", animalGenericoRequisicao.getChipId());        Animal newAnimal = new Animal();        converterParaAnimalSemConjunto(newAnimal, animalGenericoRequisicao);        Ong ong = ongRepository.findById(1L).orElseThrow(PetXException::ongNaoEncontrada);        newAnimal.setOng(ong);        newAnimal = animalRepository.save(newAnimal);        return converterParaRespostaAnimalComConjuntoDTO(newAnimal);    }    @Override    @Transactional(readOnly = true)    public AnimalGenericoResposta buscarAnimalPorId(Long id) {        return animalUtils.buscarAnimalPorIdComConjuntoResposta(id);    }    @Override    @Transactional    public void declararObito(AnimalObituarioResquisicao obiturario) {        animalRepository.findAnimalByChipId(obiturario.chipId())                .ifPresentOrElse(animal -> {                    if (animal.getStatusEnum().getStatus().equals(StatusEnum.FALECIDO.getStatus())) {                        throw PetXException.animalJaFalecido("Animal com CHIP: " + obiturario.chipId());                    }                    animal.setStatusEnum(StatusEnum.FALECIDO);                    var lista = animal.getTutores();                    if (lista == null || lista.isEmpty()) {                        obitoRepository.save(Obito.builder()                                .dataObito(obiturario.dataObito())                                .motivoObito(obiturario.motivoObito())                                .animal(animal)                                .build());                    } else {                        lista.forEach(tutor -> {                            tutor.getAnimais().remove(animal);                        });                        animalRepository.save(animal);                    }                }, () -> {                    throw PetXException.animalNaoEncontrado(obiturario.chipId());                });    }    @Override    @Transactional(readOnly = true)    public AnimalGenericoResposta buscarAnimalPorChip(String chip) {        Animal existeAnimal = animalRepository.findAnimalByChipId(chip).orElseThrow(() -> PetXException.animalNaoEncontrado(chip));        return converterParaRespostaAnimalComConjuntoDTO(existeAnimal);    }    private void verificarSeOAnimalNaoEstaFalecido(Animal animal) {        if (animal.getStatusEnum().getStatus().equals(StatusEnum.FALECIDO.getStatus())) {            throw PetXException.animalJaFalecido(animal.getChipId());        }    }}